<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:commonUi="clr-namespace:Remedy.CommonUI"
                    >

    <!--  ==================================================  -->
    <!--  START SKIN COLORS  -->
    <!--  ==================================================  -->

    <!--  Color scheme taken from https://color.adobe.com/pl/create/color-wheel/?base=2&rule=Monochromatic&selected=0&name=M%C3%B3j%20motyw%20Color&mode=rgb&rgbvalues=0.5,0,0,1,0.30000000000000004,0.30000000000000004,1,0,0,0.5,0.15000000000000002,0.15000000000000002,0.8,0,0&swatchOrder=0,1,2,3,4  -->
    <Color x:Key="Color.Primary">#FFFCBE2B</Color>
    <Color x:Key="Color.Secondary">#FF7C693B</Color>
    <Color x:Key="Color.Background.Expander.MouseOver">#FCD577</Color>

    <SolidColorBrush x:Key="Brush.TextBlock.Header" Color="Black" />
    <SolidColorBrush x:Key="Brush.TextBox.Selection" Color="#7C5E15" />
    <SolidColorBrush x:Key="Brush.Background.Frame" Color="{DynamicResource Color.Primary}" />
    <LinearGradientBrush x:Key="Brush.Background.Main" StartPoint="0.5,0" EndPoint="0.5,1">
        <GradientStop Offset="0" Color="{DynamicResource Color.Secondary}" />
        <GradientStop Offset="1" Color="{DynamicResource Color.Secondary}" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="Brush.Background.SettingPanel" Color="{DynamicResource Color.Secondary}" />
    <SolidColorBrush x:Key="Brush.Background.Logo" Color="{DynamicResource Color.Secondary}" />
    <SolidColorBrush x:Key="Brush.Background.ExpanderButton" Color="{DynamicResource Color.Primary}" />
    <SolidColorBrush x:Key="Brush.Background.Button.Pressed" Color="{DynamicResource Color.Background.Expander.MouseOver}" />
    <SolidColorBrush x:Key="Brush.BorderBrush.Button" Color="{DynamicResource Color.Secondary}" />
    <SolidColorBrush x:Key="Brush.CheckMark" Color="Black" />
    <SolidColorBrush x:Key="Brush.Foreground.Header" Color="White" />

    <Color x:Key="Private.Color.FrameBG">#ffffff</Color>
    <Color x:Key="Private.Color.ButtonBorder_Default">#7f7f7f</Color>
    <Color x:Key="Private.Color.ButtonBorder_Hover">#c3c3c3</Color>
    <SolidColorBrush x:Key="Private.Brush.Border.Checkbox.Border.Normal" Color="{StaticResource Private.Color.ButtonBorder_Default}" />
    <SolidColorBrush x:Key="Private.Brush.Background.Checkbox.Normal" Color="{StaticResource Private.Color.FrameBG}" />
    <SolidColorBrush x:Key="Private.Brush.Border.Checkbox.Border.MouseOver" Color="{StaticResource Private.Color.ButtonBorder_Hover}" />

    <Color x:Key="Private.Color.ScrollBar.ApplicationWindow">#FF9EA1A3</Color>
    <Color x:Key="Private.Color.Secondary">#4F5558</Color>
    <Color x:Key="Private.Color.White">#FFFFFF</Color>
    <SolidColorBrush x:Key="Private.Brush.Background.ScrollBar.ApplicationWindow" Color="{DynamicResource Private.Color.ScrollBar.ApplicationWindow}" />
    <SolidColorBrush x:Key="Private.Brush.Background.ScrollBar" Color="{DynamicResource Private.Color.Secondary}" />
    <SolidColorBrush x:Key="Private.Brush.BorderBrush.ScrollBar" Color="{DynamicResource Private.Color.White}" />

    <SolidColorBrush x:Key="Private.Brush.Foreground.Window" Color="{StaticResource Private.Color.White}" />
    <SolidColorBrush x:Key="Private.Brush.Background.Window" Color="{DynamicResource Color.Secondary}" />
    <SolidColorBrush x:Key="Private.Brush.Background.Window.MouseOver" Color="Black" />

    <system:String x:Key="String.WindowTitle">FAKEVerifit</system:String>
    <!--  ==================================================  -->
    <!--  END SKIN COLORS  -->
    <!--  ==================================================  -->
    <commonUi:InverseBooleanConverter x:Key="Converter.InverseBooleanConverter" />
    <commonUi:BooleanToVisibilityConverter x:Key="Converter.BooleanToVisibility.TrueMakesCollapsed"
                                           FalseValue="Visible"
                                           TrueValue="Collapsed"
                                           />


    <Style x:Key="Style.TextBlock" TargetType="TextBlock">
        <Setter Property="FontFamily" Value="Calibri" />
        <Setter Property="FontSize" Value="14" />
    </Style>

    <Style x:Key="Style.TextBlock.Header" TargetType="TextBlock">
        <Setter Property="FontFamily" Value="Calibri" />
        <Setter Property="FontSize" Value="20" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Foreground" Value="{DynamicResource Brush.Foreground.Header}" />
    </Style>

    <Style x:Key="Style.TextBox" TargetType="TextBox" />
    <Style x:Key="Style.TextBox.Mono"
           BasedOn="{StaticResource Style.TextBox}"
           TargetType="TextBox"
           >
        <Setter Property="FontFamily" Value="Consolas" />
    </Style>
    <Style x:Key="Style.TextBox.Grid"
           BasedOn="{StaticResource Style.TextBox.Mono}"
           TargetType="TextBox"
           >
        <Setter Property="Width" Value="50" />
        <Setter Property="Height" Value="18" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="0,3,0,0" />
        <Setter Property="SelectionBrush" Value="{DynamicResource DynamicResource Brush.TextBox.Selection}" />
    </Style>

    <Style x:Key="Style.TextBlock.Log"
           BasedOn="{StaticResource Style.TextBlock}"
           TargetType="TextBlock"
           >
        <Setter Property="FontFamily" Value="Consolas" />
    </Style>
    <commonUi:BooleanToWrapConverter x:Key="Private.Converter.BooleanToWrap" />
    <Style x:Key="Style.ItemsControl.Log" TargetType="{x:Type ItemsControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ItemsControl">
                    <ScrollViewer HorizontalScrollBarVisibility="Disabled" Style="{DynamicResource Style.ScrollViewer}">
                        <i:Interaction.Behaviors>
                            <commonUi:AutoScrollOnItemsChange ScrollLock="{Binding Path=(commonUi:LogExtensions.IsScrollLockOn), RelativeSource={RelativeSource TemplatedParent}}" Target="{Binding RelativeSource={RelativeSource TemplatedParent}}" />
                        </i:Interaction.Behaviors>
                        <ItemsPresenter />
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type commonUi:LogEntry}">
                    <TextBlock Style="{DynamicResource Style.TextBlock.Log}"
                               Text="{Binding Message}"
                               TextWrapping="{Binding Path=(commonUi:LogExtensions.ToggleWrap),
                                                      Converter={StaticResource Private.Converter.BooleanToWrap},
                                                      RelativeSource={RelativeSource AncestorType=ItemsControl}}"
                               />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <BitmapImage x:Key="Image.Logo" UriSource="pack://application:,,,/Remedy.CommonUI;component/Skins/fake_verifit_small.png" />
    <BitmapImage x:Key="Image.AppLogo" UriSource="pack://application:,,,/Remedy.CommonUI;component/Skins/app_logo.png" />

    <Style x:Key="Style.Border" TargetType="Border">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="Gray" />
    </Style>

    <Style x:Key="Private.Style.Path.ExpandCollapse" TargetType="{x:Type Path}">
        <Setter Property="Height" Value="7" />
        <Setter Property="Width" Value="11" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Data" Value="M0,0 L5,5 10,0" />
        <Setter Property="Stroke" Value="{DynamicResource Brush.CheckMark}" />
        <Setter Property="StrokeThickness" Value="1" />
        <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />
        <Setter Property="SnapsToDevicePixels" Value="False" />
        <Setter Property="Stretch" Value="Uniform" />
    </Style>

    <Style x:Key="Private.Style.ToggleButton.ExpandCollapse.Left" TargetType="{x:Type ToggleButton}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Background" Value="{DynamicResource Brush.Background.ExpanderButton}" />
        <Setter Property="ToolTip" Value="Expand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ContentControl Padding="10">
                        <Grid x:Name="MainGrid"
                              Width="18"
                              Background="{TemplateBinding Background}"
                              SnapsToDevicePixels="False"
                              >
                            <StackPanel VerticalAlignment="Center">
                                <Path x:Name="ArrowPath"
                                      Margin="0,15"
                                      Style="{DynamicResource Private.Style.Path.ExpandCollapse}"
                                      >
                                    <Path.RenderTransform>
                                        <TransformGroup>
                                            <RotateTransform Angle="-90" />
                                            <ScaleTransform ScaleX="1" ScaleY="1" />
                                        </TransformGroup>
                                    </Path.RenderTransform>
                                </Path>
                                <TextBlock Style="{DynamicResource Style.TextBlock}" Text="{TemplateBinding Content}">
                                    <TextBlock.LayoutTransform>
                                        <TransformGroup>
                                            <RotateTransform Angle="270" />
                                            <ScaleTransform ScaleX="1" ScaleY="1" />
                                        </TransformGroup>
                                    </TextBlock.LayoutTransform>
                                </TextBlock>
                                <Path x:Name="ArrowPath2"
                                      Margin="0,15"
                                      Style="{DynamicResource Private.Style.Path.ExpandCollapse}"
                                      >
                                    <Path.RenderTransform>
                                        <TransformGroup>
                                            <RotateTransform Angle="270" />
                                            <ScaleTransform ScaleX="1" ScaleY="1" />
                                        </TransformGroup>
                                    </Path.RenderTransform>
                                </Path>
                            </StackPanel>
                        </Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever"
                                                                       Storyboard.TargetName="ArrowPath"
                                                                       Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[1].(ScaleTransform.ScaleX)"
                                                                       >
                                            <EasingDoubleKeyFrame KeyTime="00:00:0.3" Value="1.8" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:1" Value="1.0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever"
                                                                       Storyboard.TargetName="ArrowPath"
                                                                       Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[1].(ScaleTransform.ScaleY)"
                                                                       >
                                            <EasingDoubleKeyFrame KeyTime="00:00:0.3" Value="1.8" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:1" Value="1.0" />
                                        </DoubleAnimationUsingKeyFrames>

                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever"
                                                                       Storyboard.TargetName="ArrowPath2"
                                                                       Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[1].(ScaleTransform.ScaleX)"
                                                                       >
                                            <EasingDoubleKeyFrame KeyTime="00:00:0.3" Value="1.8" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:1" Value="1.0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever"
                                                                       Storyboard.TargetName="ArrowPath2"
                                                                       Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[1].(ScaleTransform.ScaleY)"
                                                                       >
                                            <EasingDoubleKeyFrame KeyTime="00:00:0.3" Value="1.8" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:1" Value="1.0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ArrowPath" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)">
                                            <EasingDoubleKeyFrame KeyTime="00:00:0.5" Value="90" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ArrowPath2" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)">
                                            <EasingDoubleKeyFrame KeyTime="00:00:0.5" Value="90" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ArrowPath" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)">
                                            <EasingDoubleKeyFrame KeyTime="00:00:0.5" Value="-90" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ArrowPath2" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)">
                                            <EasingDoubleKeyFrame KeyTime="00:00:0.5" Value="270" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Indeterminate" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </ContentControl>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource Brush.Background.Button.Pressed}" />
                <Setter Property="Cursor" Value="Hand" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="ToolTip" Value="Collapse" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="Private.Style.ToggleButton.ExpandCollapse.Right" TargetType="{x:Type ToggleButton}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Background" Value="{DynamicResource Brush.Background.ExpanderButton}" />
        <Setter Property="ToolTip" Value="Expand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ContentControl Padding="10">
                        <Grid x:Name="MainGrid"
                              Width="18"
                              Background="{TemplateBinding Background}"
                              SnapsToDevicePixels="False"
                              >
                            <StackPanel VerticalAlignment="Center">
                                <Path x:Name="ArrowPath"
                                      Margin="0,15"
                                      Style="{DynamicResource Private.Style.Path.ExpandCollapse}"
                                      >
                                    <Path.RenderTransform>
                                        <TransformGroup>
                                            <RotateTransform Angle="90" />
                                            <ScaleTransform ScaleX="1" ScaleY="1" />
                                        </TransformGroup>
                                    </Path.RenderTransform>
                                </Path>
                                <TextBlock Style="{DynamicResource Style.TextBlock}" Text="{TemplateBinding Content}">
                                    <TextBlock.LayoutTransform>
                                        <TransformGroup>
                                            <RotateTransform Angle="90" />
                                            <ScaleTransform ScaleX="1" ScaleY="1" />
                                        </TransformGroup>
                                    </TextBlock.LayoutTransform>
                                </TextBlock>
                                <Path x:Name="ArrowPath2"
                                      Margin="0,15"
                                      Style="{DynamicResource Private.Style.Path.ExpandCollapse}"
                                      >
                                    <Path.RenderTransform>
                                        <TransformGroup>
                                            <RotateTransform Angle="90" />
                                            <ScaleTransform ScaleX="1" ScaleY="1" />
                                        </TransformGroup>
                                    </Path.RenderTransform>
                                </Path>
                            </StackPanel>
                        </Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever"
                                                                       Storyboard.TargetName="ArrowPath"
                                                                       Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[1].(ScaleTransform.ScaleX)"
                                                                       >
                                            <EasingDoubleKeyFrame KeyTime="00:00:0.3" Value="1.8" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:1" Value="1.0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever"
                                                                       Storyboard.TargetName="ArrowPath"
                                                                       Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[1].(ScaleTransform.ScaleY)"
                                                                       >
                                            <EasingDoubleKeyFrame KeyTime="00:00:0.3" Value="1.8" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:1" Value="1.0" />
                                        </DoubleAnimationUsingKeyFrames>

                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever"
                                                                       Storyboard.TargetName="ArrowPath2"
                                                                       Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[1].(ScaleTransform.ScaleX)"
                                                                       >
                                            <EasingDoubleKeyFrame KeyTime="00:00:0.3" Value="1.8" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:1" Value="1.0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever"
                                                                       Storyboard.TargetName="ArrowPath2"
                                                                       Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[1].(ScaleTransform.ScaleY)"
                                                                       >
                                            <EasingDoubleKeyFrame KeyTime="00:00:0.3" Value="1.8" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:1" Value="1.0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ArrowPath" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)">
                                            <EasingDoubleKeyFrame KeyTime="00:00:0.5" Value="-90" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ArrowPath2" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)">
                                            <EasingDoubleKeyFrame KeyTime="00:00:0.5" Value="270" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ArrowPath" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)">
                                            <EasingDoubleKeyFrame KeyTime="00:00:0.5" Value="90" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ArrowPath2" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)">
                                            <EasingDoubleKeyFrame KeyTime="00:00:0.5" Value="90" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Indeterminate" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </ContentControl>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource Brush.Background.Button.Pressed}" />
                <Setter Property="Cursor" Value="Hand" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="ToolTip" Value="Collapse" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <DropShadowEffect x:Key="Private.Effect.DropShadow"
                      BlurRadius="7"
                      Direction="270"
                      Opacity="0.2"
                      ShadowDepth="1"
                      Color="Black"
                      />

    <Storyboard x:Key="Private.Storyboard.Expand">
        <DoubleAnimation BeginTime="00:00:0.3"
                         Duration="0:0:0.7"
                         Storyboard.TargetName="ContentHolder"
                         Storyboard.TargetProperty="Opacity"
                         To="1"
                         />
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                       Duration="00:00:0.8"
                                       Storyboard.TargetName="ContentHolder"
                                       Storyboard.TargetProperty="(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleX)"
                                       >
            <EasingDoubleKeyFrame KeyTime="00:00:0.6" Value="1">
                <EasingDoubleKeyFrame.EasingFunction>
                    <BackEase Amplitude="0.5" EasingMode="EaseInOut" />
                </EasingDoubleKeyFrame.EasingFunction>
            </EasingDoubleKeyFrame>
        </DoubleAnimationUsingKeyFrames>
    </Storyboard>

    <Storyboard x:Key="Private.Storyboard.Collapse">
        <DoubleAnimation BeginTime="00:00:00"
                         Duration="0:0:0.3"
                         Storyboard.TargetName="ContentHolder"
                         Storyboard.TargetProperty="Opacity"
                         To="0"
                         />
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                       Duration="00:00:0.6"
                                       Storyboard.TargetName="ContentHolder"
                                       Storyboard.TargetProperty="(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleX)"
                                       >
            <EasingDoubleKeyFrame KeyTime="00:00:0.45" Value="0.0001">
                <EasingDoubleKeyFrame.EasingFunction>
                    <BackEase Amplitude="0.4" EasingMode="EaseInOut" />
                </EasingDoubleKeyFrame.EasingFunction>
            </EasingDoubleKeyFrame>
        </DoubleAnimationUsingKeyFrames>
    </Storyboard>

    <Style x:Key="Style.Expander.Left" TargetType="{x:Type Expander}">
        <Setter Property="Margin" Value="0,16,0,8" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <DockPanel x:Name="ExpanderDock" LastChildFill="True">
                        <ToggleButton x:Name="HeaderSite"
                                      HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                      Content="{TemplateBinding Header}"
                                      ContentTemplate="{TemplateBinding HeaderTemplate}"
                                      ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                      DockPanel.Dock="Right"
                                      IsChecked="{Binding IsExpanded,
                                                          Mode=TwoWay,
                                                          RelativeSource={RelativeSource TemplatedParent}}"
                                      Style="{DynamicResource Private.Style.ToggleButton.ExpandCollapse.Left}"
                                      />
                        <ContentPresenter x:Name="ContentHolder"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          DockPanel.Dock="Left"
                                          Focusable="false"
                                          Opacity="1"
                                          >

                            <ContentPresenter.LayoutTransform>
                                <!--  Added very small value to enable WPF to measure content height  -->
                                <ScaleTransform ScaleX="0.0001" />
                            </ContentPresenter.LayoutTransform>
                        </ContentPresenter>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="False">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource Private.Storyboard.Collapse}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource Private.Storyboard.Expand}" />
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Style.Expander.Right" TargetType="{x:Type Expander}">
        <Setter Property="Margin" Value="0,16,0,8" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <DockPanel x:Name="ExpanderDock" LastChildFill="True">
                        <ToggleButton x:Name="HeaderSite"
                                      HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                      Content="{TemplateBinding Header}"
                                      ContentTemplate="{TemplateBinding HeaderTemplate}"
                                      ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                      DockPanel.Dock="Left"
                                      IsChecked="{Binding IsExpanded,
                                                          Mode=TwoWay,
                                                          RelativeSource={RelativeSource TemplatedParent}}"
                                      Style="{DynamicResource Private.Style.ToggleButton.ExpandCollapse.Right}"
                                      />
                        <ContentPresenter x:Name="ContentHolder"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          DockPanel.Dock="Right"
                                          Focusable="false"
                                          Opacity="1"
                                          >

                            <ContentPresenter.LayoutTransform>
                                <!--  Added very small value to enable WPF to measure content height  -->
                                <ScaleTransform ScaleX="0.0001" />
                            </ContentPresenter.LayoutTransform>
                        </ContentPresenter>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="False">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource Private.Storyboard.Collapse}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource Private.Storyboard.Expand}" />
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Style.ItemsControl.CheckBoxes" TargetType="ItemsControl">
        <Setter Property="ItemTemplate" Value="{DynamicResource Private.DataTemplate.Setting}" />
    </Style>

    <DataTemplate x:Key="Private.DataTemplate.Setting.CheckBox" DataType="{x:Type commonUi:Setting}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="100" />
            </Grid.ColumnDefinitions>
            <CheckBox Content="{Binding Value}"
                      IsChecked="{Binding IsChecked,
                                          Mode=TwoWay}"
                      Style="{DynamicResource Style.CheckBox}"
                      />

            <TextBox Grid.Column="1"
                     Height="20"
                     VerticalAlignment="Center"
                     Margin="5,0,0,0"
                     Text="{Binding LocalizedName,
                                    Mode=TwoWay,
                                    UpdateSourceTrigger=PropertyChanged}"
                     />
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="Private.DataTemplate.Setting.RadioButton" DataType="{x:Type commonUi:Setting}">
        <Border Margin="0,2.5">
            <RadioButton Content="{Binding LocalizedName}"
                         GroupName="{Binding GroupName}"
                         IsChecked="{Binding IsChecked,
                                             Mode=TwoWay}"
                         Style="{DynamicResource Style.RadioButton}"
                         />
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="Private.DataTemplate.CellWithHeader" DataType="{x:Type commonUi:FreqVal}">
        <Grid Margin="3,0,3,0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" SharedSizeGroup="FreqColumn" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <TextBlock HorizontalAlignment="Center"
                       FontSize="16"
                       FontWeight="Normal"
                       Foreground="{DynamicResource Brush.TextBlock.Header}"
                       Style="{DynamicResource Style.TextBlock.Header}"
                       Text="{Binding Frequency}"
                       />
            <TextBox Grid.Row="1"
                     Style="{DynamicResource Style.TextBox.Grid}"
                     Text="{Binding Value,
                                    Mode=TwoWay,
                                    UpdateSourceTrigger=PropertyChanged}"
                     >
                <i:Interaction.Behaviors>
                    <commonUi:SelectAllTextOnFocusBehavior />
                </i:Interaction.Behaviors>
            </TextBox>
        </Grid>
    </DataTemplate>

    <Style x:Key="Style.ItemsControl.WrapedLabeledItems" TargetType="ItemsControl">
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type commonUi:HeaderedDataItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition SharedSizeGroup="header" />
                            <ColumnDefinition Width="10" />
                            <ColumnDefinition SharedSizeGroup="value" />
                        </Grid.ColumnDefinitions>
                        <TextBlock Grid.Column="0"
                                   FontWeight="Bold"
                                   Style="{DynamicResource Style.TextBlock}"
                                   Text="{Binding Header}"
                                   />
                        <TextBlock Grid.Column="2"
                                   Padding="0,0,15,0"
                                   Style="{DynamicResource Style.TextBlock}"
                                   Text="{Binding LocalizedName}"
                                   ToolTip="{Binding Value}"
                                   ToolTipService.ShowDuration="30000"
                                   />
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel Orientation="Vertical" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ItemsControl}">
                    <Grid Grid.IsSharedSizeScope="True">
                        <ItemsPresenter />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Style.HeaderedContentControl" TargetType="HeaderedContentControl">
        <Setter Property="Margin" Value="5,5,5,0" />
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type system:String}">
                    <TextBlock FontSize="15"
                               Foreground="{DynamicResource Brush.Foreground.Header}"
                               Margin="16,0,0,0"
                               Text="{Binding}"
                               />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type HeaderedContentControl}">
                    <Grid HorizontalAlignment="Stretch">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition x:Name="ContentRow" Height="Auto" />
                        </Grid.RowDefinitions>
                        <ContentControl HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                                        Content="{TemplateBinding Header}"
                                        ContentTemplate="{TemplateBinding HeaderTemplate}"
                                        />
                        <ContentControl Grid.Row="1" Style="{DynamicResource Style.ControlContent.OuterShadow}">
                            <ContentPresenter />
                        </ContentControl>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="VerticalContentAlignment" Value="Center">
                            <Setter TargetName="ContentRow" Property="Height" Value="*" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Style.HeaderedContentControl.Installer" TargetType="HeaderedContentControl">
        <Setter Property="Margin" Value="5,5,5,0" />
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type system:String}">
                    <TextBlock FontSize="15"
                               Foreground="{DynamicResource Brush.Foreground.Header}"
                               Text="{Binding}"
                               />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type HeaderedContentControl}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition x:Name="ContentRow" Height="Auto" />
                        </Grid.RowDefinitions>
                        <ContentControl HorizontalAlignment="Center"
                                        Content="{TemplateBinding Header}"
                                        ContentTemplate="{TemplateBinding HeaderTemplate}"
                                        />
                        <ContentControl Grid.Row="1" Style="{DynamicResource Style.ControlContent.OuterShadow}">
                            <ContentPresenter />
                        </ContentControl>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="VerticalContentAlignment" Value="Center">
                            <Setter TargetName="ContentRow" Property="Height" Value="*" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="Visibility" Value="Collapsed">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:6"
                                             From="1.0"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0.0"
                                             />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Style.HeaderedItemsControl.Base" TargetType="{x:Type HeaderedItemsControl}">
        <Setter Property="Margin" Value="5,5,5,0" />

        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type system:String}">
                    <TextBlock FontSize="15"
                               Foreground="{DynamicResource Brush.Foreground.Header}"
                               Margin="16,0,0,0"
                               Text="{Binding}"
                               />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type HeaderedItemsControl}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <ContentControl Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" />
                        <ContentControl Grid.Row="1" Style="{DynamicResource Style.ControlContent.OuterShadow}">
                            <ItemsPresenter />
                        </ContentControl>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Style.HeaderedItemsControl.ListOfCheckBoxes"
           BasedOn="{StaticResource Style.HeaderedItemsControl.Base}"
           TargetType="{x:Type HeaderedItemsControl}"
           >
        <Setter Property="ItemTemplate" Value="{DynamicResource Private.DataTemplate.Setting.CheckBox}" />
    </Style>

    <Style x:Key="Style.ItemsControl.ListOfRadioButtons" TargetType="{x:Type ItemsControl}">
        <Setter Property="ItemTemplate" Value="{DynamicResource Private.DataTemplate.Setting.RadioButton}" />
    </Style>

    <Style x:Key="Style.HeaderedItemsControl.ListOfRadioButtons"
           BasedOn="{StaticResource Style.HeaderedItemsControl.Base}"
           TargetType="{x:Type HeaderedItemsControl}"
           >
        <Setter Property="ItemTemplate" Value="{DynamicResource Private.DataTemplate.Setting.RadioButton}" />
    </Style>

    <Style x:Key="Style.HeaderedItemsControl.FrequencyValueEditor.ColumnHeader" TargetType="{x:Type HeaderedItemsControl}">
        <Setter Property="Margin" Value="0,2,0,2" />
        <Setter Property="ItemTemplate" Value="{DynamicResource Private.DataTemplate.CellWithHeader}" />
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type system:String}">
                    <TextBlock Style="{DynamicResource Style.TextBlock}" Text="{Binding}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type HeaderedItemsControl}">
                    <Grid VerticalAlignment="Top">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="LabelGroup" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <ContentControl VerticalAlignment="Bottom"
                                        Content="{TemplateBinding Header}"
                                        ContentTemplate="{TemplateBinding HeaderTemplate}"
                                        />
                        <ItemsPresenter Grid.Column="1" Margin="16,0,0,0" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Style.HeaderedItemsControl.FrequencyValueEditor"
           BasedOn="{StaticResource Style.HeaderedItemsControl.FrequencyValueEditor.ColumnHeader}"
           TargetType="{x:Type HeaderedItemsControl}"
           >
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type commonUi:FreqVal}">
                    <Grid Margin="3,0,3,0">
                        <TextBox Style="{DynamicResource Style.TextBox.Grid}" Text="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                            <i:Interaction.Behaviors>
                                <commonUi:SelectAllTextOnFocusBehavior />
                            </i:Interaction.Behaviors>
                        </TextBox>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Style.Button" TargetType="ButtonBase">
        <Setter Property="Padding" Value="3" />
        <Setter Property="BorderBrush" Value="{DynamicResource Brush.BorderBrush.Button}" />
        <Setter Property="Background" Value="{DynamicResource Brush.Background.ExpanderButton}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="True"
                            >
                        <ContentPresenter x:Name="contentPresenter"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Focusable="False"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource Brush.Background.Button.Pressed}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource Brush.BorderBrush.Button}" />
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="White" />
                            <Setter Property="BorderBrush" Value="{DynamicResource Brush.BorderBrush.Button}" />
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.2" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock FontWeight="Bold"
                               Style="{DynamicResource Style.TextBlock}"
                               Text="{Binding Path=Content,
                                              RelativeSource={RelativeSource TemplatedParent}}"
                               />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Style.ToggleButton"
           BasedOn="{StaticResource Style.Button}"
           TargetType="ToggleButton"
           >
        <Setter Property="commonUi:ToggleButtonExtensions.CheckedContent" Value="{Binding Content, RelativeSource={RelativeSource Self}}" />
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="False">
                <Setter Property="Content" Value="{Binding Path=(commonUi:ToggleButtonExtensions.UncheckedContent), RelativeSource={RelativeSource Self}}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="White" />
                <Setter Property="BorderBrush" Value="{DynamicResource Brush.BorderBrush.Button}" />
                <Setter Property="Cursor" Value="Hand" />
                <Setter Property="Content" Value="{Binding Path=(commonUi:ToggleButtonExtensions.CheckedContent), RelativeSource={RelativeSource Self}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="IsMouseOver" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="LightGray" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False" />
                    <Condition Property="IsMouseOver" Value="True" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource Brush.Background.Button.Pressed}" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Cursor" Value="Hand" />
                <Setter Property="BorderBrush" Value="{DynamicResource Brush.BorderBrush.Button}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Style.RadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type system:String}">
                    <TextBlock Style="{DynamicResource Style.TextBlock}" Text="{Binding .}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Private.Style.CheckBox.Box" TargetType="{x:Type Border}">
        <Setter Property="Width" Value="14" />
        <Setter Property="Height" Value="14" />
        <Setter Property="BorderBrush" Value="{DynamicResource Private.Brush.Border.Checkbox.Border.Normal}" />
        <Setter Property="Background" Value="{DynamicResource Private.Brush.Background.Checkbox.Normal}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="0" />
    </Style>

    <Style x:Key="Style.CheckBox" TargetType="{x:Type CheckBox}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type system:String}">
                    <TextBlock Style="{DynamicResource Style.TextBlock}" Text="{Binding .}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="Padding" Value="2,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Border Background="Transparent" Padding="5">
                        <Grid Name="bulletAndLabel">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Grid x:Name="Bullet"
                                  Grid.Column="0"
                                  Height="15"
                                  Width="15"
                                  >
                                <Border x:Name="border"
                                        RenderTransformOrigin="0.5,0.5"
                                        Style="{DynamicResource Private.Style.CheckBox.Box}"
                                        >
                                    <Border.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleX="1" ScaleY="1" />
                                            <RotateTransform Angle="0" />
                                        </TransformGroup>
                                    </Border.RenderTransform>
                                    <Path x:Name="checkedIndicator"
                                          Height="10"
                                          Width="10"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          Data="M 1,5 L 4,8 8,3 4,8"
                                          Fill="{DynamicResource Brush.CheckMark}"
                                          Stretch="None"
                                          Stroke="{DynamicResource Brush.CheckMark}"
                                          StrokeThickness="2"
                                          Visibility="Hidden"
                                          />
                                </Border>
                            </Grid>
                            <ContentControl x:Name="contentControl"
                                            Grid.Column="1"
                                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                            Content="{TemplateBinding Content}"
                                            ContentTemplate="{TemplateBinding ContentTemplate}"
                                            Focusable="False"
                                            FontFamily="{TemplateBinding FontFamily}"
                                            FontSize="{TemplateBinding FontSize}"
                                            FontWeight="{TemplateBinding FontWeight}"
                                            Margin="{TemplateBinding Padding}"
                                            />
                        </Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.2" To="Normal" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                            <EasingDoubleKeyFrame KeyTime="00:00:0.2" Value="1.2" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                            <EasingDoubleKeyFrame KeyTime="00:00:0.2" Value="1.2" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[1].(RotateTransform.Angle)">
                                            <EasingDoubleKeyFrame KeyTime="00:00:0.3" Value="15" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <!--  Pressed state is same as MouseOver  -->
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="BorderBrush">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource Private.Brush.Border.Checkbox.Border.MouseOver}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="checkedIndicator" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked" />
                                <VisualState x:Name="Indeterminate" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter Property="Padding" Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="Private.Style.Thumb.ApplicationWindow" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="{DynamicResource Private.Brush.Background.ScrollBar}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Private.Brush.BorderBrush.ScrollBar}" />
        <Setter Property="BorderThickness" Value="{DynamicResource Private.BorderThickness.ScrollBar.VisiblePart}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="Transparent">
                        <Border x:Name="visiblePart"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2"
                                Margin="12,0,0,0"
                                />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="visiblePart" Property="Margin" Value="8,0,0,0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Private.Style.RepeatButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ScrollBar - defines a style for ScrollBar control (used by the ScrollViewer of application window)  -->
    <Style x:Key="Private.Style.ScrollBar.ApplicationWindow" TargetType="{x:Type ScrollBar}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="GridRoot" Width="16">
                        <Track Name="PART_Track" IsDirectionReversed="True">
                            <Track.Resources>
                                <!--
                                    Thumb's minimum height is half of this metric, it will not work correctly if we just assign
                                    minimum height of the track, each time scrollbar recalculates it based on the VerticalScrollBarButtonHeightKey
                                    http://referencesource.microsoft.com/#PresentationFramework/src/Framework/System/Windows/Controls/Primitives/Track.cs,637
                                    The actual Microsoft code:
                                    if (isVertical)
                                    {
                                    trackLength = arrangeSize.Height;
                                    // Try to use the apps resource if it exists, fall back to SystemParameters if it doesn't
                                    object buttonHeightResource = TryFindResource(SystemParameters.VerticalScrollBarButtonHeightKey);
                                    double buttonHeight = buttonHeightResource is double ? (double)buttonHeightResource : SystemParameters.VerticalScrollBarButtonHeight;
                                    thumbMinLength = Math.Floor(buttonHeight * 0.5);
                                    }
                                    So the MinimumSize = 32px is VerticalScrollBarButtonHeightKey = 64px
                                -->
                                <system:Double x:Key="{x:Static SystemParameters.VerticalScrollBarButtonHeightKey}">64</system:Double>
                            </Track.Resources>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton x:Name="PageUp"
                                              Command="ScrollBar.PageUpCommand"
                                              Style="{DynamicResource Private.Style.RepeatButton}"
                                              />
                            </Track.DecreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource Private.Style.Thumb.ApplicationWindow}" />
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton x:Name="PageDown"
                                              Command="ScrollBar.PageDownCommand"
                                              Style="{DynamicResource Private.Style.RepeatButton}"
                                              />
                            </Track.IncreaseRepeatButton>
                        </Track>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Horizontal">

                            <!--  Rotate the ScrollBar from Vertical to Horizontal  -->
                            <Setter TargetName="GridRoot" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="90" />
                                </Setter.Value>
                            </Setter>

                            <!--  Track is bound to Orientation internally, so we need to rotate it back to Vertical  -->
                            <Setter TargetName="PART_Track" Property="Orientation" Value="Vertical" />
                            <Setter TargetName="PART_Track" Property="IsDirectionReversed" Value="False" />

                            <!--  Change the commands to do Horizontal commands  -->
                            <Setter TargetName="PageDown" Property="Command" Value="ScrollBar.PageRightCommand" />
                            <Setter TargetName="PageUp" Property="Command" Value="ScrollBar.PageLeftCommand" />

                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ScrollViewer - defines a template for ScrollViewer control, used only by the application window  -->
    <Style x:Key="Style.ScrollViewer"
           BasedOn="{x:Null}"
           TargetType="{x:Type ScrollViewer}"
           >
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter Grid.Column="0"
                                                Grid.ColumnSpan="2"
                                                Grid.Row="0"
                                                Grid.RowSpan="2"
                                                CanContentScroll="{TemplateBinding CanContentScroll}"
                                                Content="{TemplateBinding Content}"
                                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                                Margin="{TemplateBinding Padding}"
                                                />
                        <ScrollBar x:Name="PART_VerticalScrollBar"
                                   Grid.Column="1"
                                   Grid.Row="0"
                                   Grid.RowSpan="2"
                                   Maximum="{TemplateBinding ScrollableHeight}"
                                   Minimum="0"
                                   Orientation="Vertical"
                                   Style="{DynamicResource Private.Style.ScrollBar.ApplicationWindow}"
                                   ViewportSize="{TemplateBinding ViewportHeight}"
                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                   Value="{Binding VerticalOffset,
                                                   Mode=OneWay,
                                                   RelativeSource={RelativeSource TemplatedParent}}"
                                   />
                        <ScrollBar x:Name="PART_HorizontalScrollBar"
                                   Grid.Column="0"
                                   Grid.ColumnSpan="2"
                                   Grid.Row="1"
                                   Maximum="{TemplateBinding ScrollableWidth}"
                                   Minimum="0"
                                   Orientation="Horizontal"
                                   Style="{DynamicResource Private.Style.ScrollBar.ApplicationWindow}"
                                   ViewportSize="{TemplateBinding ViewportWidth}"
                                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                   Value="{Binding HorizontalOffset,
                                                   Mode=OneWay,
                                                   RelativeSource={RelativeSource TemplatedParent}}"
                                   />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="PART_VerticalScrollBar" Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_VerticalScrollBar" Property="Panel.ZIndex" Value="1" />
                        </Trigger>
                        <Trigger SourceName="PART_HorizontalScrollBar" Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_HorizontalScrollBar" Property="Panel.ZIndex" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Style.FlowDocumentScrollViewer"
           BasedOn="{x:Null}"
           TargetType="{x:Type FlowDocumentScrollViewer}"
           >
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type FlowDocumentScrollViewer}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Border BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Margin="{TemplateBinding Padding}"
                                >
                            <ScrollViewer x:Name="PART_ContentHost"
                                          Uid="ScrollViewer_8"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          CanContentScroll="True"
                                          Style="{DynamicResource Style.ScrollViewer}"
                                          />
                        </Border>
                        <Border x:Name="PART_ToolBarHost"
                                Grid.Row="1"
                                Background="{DynamicResource Private.Brush.Background.ScrollBar.ApplicationWindow}"
                                >
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <Border x:Name="PART_FindToolBarHost"
                                        Grid.Column="0"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Center"
                                        Visibility="Collapsed"
                                        />
                                <Grid Grid.Column="1"
                                      HorizontalAlignment="Right"
                                      VerticalAlignment="Center"
                                      >
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <RepeatButton Uid="RepeatButton_7"
                                                  Grid.Column="0"
                                                  Height="{TemplateBinding FontSize}"
                                                  Width="{TemplateBinding FontSize}"
                                                  BorderBrush="{TemplateBinding BorderBrush}"
                                                  Command="NavigationCommands.DecreaseZoom"
                                                  Foreground="{TemplateBinding Foreground}"
                                                  IsEnabled="{TemplateBinding CanDecreaseZoom}"
                                                  Style="{DynamicResource Private.Style.RepeatButton}"
                                                  ToolTip="Decrease Zoom"
                                                  >
                                        <RepeatButton.LayoutTransform>
                                            <ScaleTransform ScaleX="2.2" ScaleY="2.2" />
                                        </RepeatButton.LayoutTransform>
                                    </RepeatButton>
                                    <RepeatButton Uid="RepeatButton_8"
                                                  Grid.Column="2"
                                                  Height="{TemplateBinding FontSize}"
                                                  Width="{TemplateBinding FontSize}"
                                                  BorderBrush="{TemplateBinding BorderBrush}"
                                                  Command="NavigationCommands.IncreaseZoom"
                                                  Foreground="{TemplateBinding Foreground}"
                                                  IsEnabled="{TemplateBinding CanIncreaseZoom}"
                                                  Style="{DynamicResource Private.Style.RepeatButton}"
                                                  ToolTip="Increase Zoom"
                                                  >
                                        <RepeatButton.LayoutTransform>
                                            <ScaleTransform ScaleX="2.2" ScaleY="2.2" />
                                        </RepeatButton.LayoutTransform>
                                    </RepeatButton>
                                </Grid>
                            </Grid>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="True" />
                    <Condition Property="IsSelectionActive" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource Private.Brush.Background.ScrollBar}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>


    <Color x:Key="Private.Color.Shadow">#000000</Color>

    <DropShadowEffect x:Key="Private.Effect.ShadowEffect_08.Ambient"
                      BlurRadius="8"
                      Opacity="0.08"
                      ShadowDepth="0"
                      Color="{StaticResource Private.Color.Shadow}"
                      />

    <DropShadowEffect x:Key="Private.Effect.ShadowEffect_08.Direct"
                      BlurRadius="24"
                      Direction="270"
                      Opacity="0.24"
                      ShadowDepth="12"
                      Color="{StaticResource Private.Color.Shadow}"
                      />

    <DropShadowEffect x:Key="Private.Effect.ShadowEffect_02.Ambient"
                      BlurRadius="2"
                      Opacity="0.08"
                      ShadowDepth="0"
                      Color="{StaticResource Private.Color.Shadow}"
                      />

    <DropShadowEffect x:Key="Private.Effect.ShadowEffect_02.Direct"
                      BlurRadius="6"
                      Direction="270"
                      Opacity="0.24"
                      ShadowDepth="3"
                      Color="{StaticResource Private.Color.Shadow}"
                      />

    <ControlTemplate x:Key="Private.ControlTemplate.OuterShadow" TargetType="{x:Type ContentControl}">
        <Grid>
            <Border x:Name="AmbientShadow" Effect="{DynamicResource Private.Effect.ShadowEffect_02.Ambient}">
                <Border x:Name="DirectShadow"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="0"
                        Effect="{DynamicResource Private.Effect.ShadowEffect_02.Direct}"
                        />
            </Border>
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              Content="{TemplateBinding Content}"
                              ContentTemplate="{TemplateBinding ContentTemplate}"
                              ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                              Margin="{TemplateBinding Padding}"
                              />
        </Grid>
    </ControlTemplate>

    <Style x:Key="Private.Style.ControlContent.Shadow.Base" TargetType="{x:Type ContentControl}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Focusable" Value="False" />
    </Style>

    <Style x:Key="Style.ControlContent.OuterShadow"
           BasedOn="{StaticResource Private.Style.ControlContent.Shadow.Base}"
           TargetType="{x:Type ContentControl}"
           >
        <Setter Property="Background" Value="{DynamicResource Brush.Background.Frame}" />
        <Setter Property="Padding" Value="8" />
        <Setter Property="Margin" Value="16,8,16,8" />
        <Setter Property="Template" Value="{StaticResource Private.ControlTemplate.OuterShadow}" />
    </Style>

    <Image x:Key="Image.TheLogo"
           HorizontalAlignment="Center"
           Margin="0,8,0,8"
           Source="{DynamicResource Image.Logo}"
           Stretch="None"
           ToolTip="There is no Verifit device!"
           x:Shared="false"
           />

    <Style x:Key="Style.LogoBar" TargetType="{x:Type ContentControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <ContentControl Background="{DynamicResource Brush.Background.Logo}" Content="{DynamicResource Image.TheLogo}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Style.TextBox.ReadOnly" TargetType="{x:Type TextBox}">
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="SelectionBrush" Value="{DynamicResource Brush.TextBox.Selection}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="Transparent" />
    </Style>
    <Style x:Key="Style.Button.ThemeSwitch" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="Transparent">
                        <ContentPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border Height="25"
                            Width="25"
                            Background="{Binding Primary}"
                            BorderBrush="{Binding Secondary}"
                            BorderThickness="5"
                            CornerRadius="2"
                            Margin="5"
                            />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Cursor" Value="Hand" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="Style.ItemsControl.Themes" TargetType="ItemsControl">
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type commonUi:ThemeDataItem}">
                    <Button Command="{Binding SwitchThemeCommand}"
                            Content="{Binding .}"
                            Style="{DynamicResource Style.Button.ThemeSwitch}"
                            ToolTip="{Binding Name}"
                            />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Style.RichTextBox" TargetType="{x:Type RichTextBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RichTextBox}">
                    <ScrollViewer Style="{DynamicResource Style.ScrollViewer}">
                        <AdornerDecorator x:Name="PART_ContentHost" Focusable="False" />
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Style.Button.Window" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" CornerRadius="5">
                        <ContentPresenter x:Name="contentPresenter"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{StaticResource Private.Brush.Background.Window.MouseOver}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="contentPresenter" Property="Opacity" Value=".5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Path x:Key="Path.About.Icon"
          Fill="White"
          Stretch="Uniform"
          >
        <Path.Data>
            <PathGeometry Figures="M-187.3 352.9c-5.5-2.2-11.5-3.4-17.7-3.4c-24.3 0-44.3 18.2-47.2 41.6c-0.2 1.9-0.4 3.9-0.4 5.9  c0 26.3 21.3 47.5 47.5 47.5c26.3 0 47.5-21.3 47.5-47.5C-157.5 377-169.8 359.9-187.3 352.9z M-204.6 419.7c0 1-0.8 1.9-1.9 1.9  c-1 0-1.9-0.8-1.9-1.9v-1.3c0-1 0.8-1.9 1.9-1.9c1 0 1.9 0.8 1.9 1.9V419.7z M-190.4 391.4c-0.6 5.4-3.9 9.7-10.2 13.1  c-5 2.7-4.1 7.3-4.1 7.5c0.2 1-0.4 2-1.4 2.2c-0.1 0-0.3 0-0.4 0c-0.9 0-1.6-0.6-1.8-1.4c-0.6-2.6 0-8.3 6-11.6  c5.2-2.8 7.8-6.1 8.3-10.2c0.5-5-2-10.9-7.7-12c-5.2-1.1-8.7 1.1-9.9 2.1c-1.7 1.3-2.5 2.7-2.5 3.5c0 1-0.9 1.8-1.9 1.8  c-1 0-1.8-0.9-1.8-1.9c0.1-2.1 1.6-4.5 3.9-6.3c3.5-2.7 8.2-3.7 12.9-2.8C-193.2 377-189.7 384.9-190.4 391.4z" FillRule="NonZero" />
        </Path.Data>
    </Path>

    <Style x:Key="Style.MyWindow" TargetType="commonUi:MyWindow">
        <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}" />
        <Setter Property="ResizeMode" Value="CanResizeWithGrip" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="TextOptions.TextFormattingMode" Value="Display" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="commonUi:MyWindow">
                    <Border x:Name="WindowBorder"
                            Background="{StaticResource Private.Brush.Background.Window}"
                            BorderBrush="Black"
                            BorderThickness="1"
                            CornerRadius="5"
                            Margin="{TemplateBinding Margin}"
                            >
                        <Border>
                            <AdornerDecorator>
                                <Grid x:Name="LayoutRoot">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="*" />
                                    </Grid.RowDefinitions>
                                    <Rectangle Grid.Row="1"
                                               Height="1"
                                               Fill="#66000000"
                                               />
                                    <ContentControl Grid.Row="2"
                                                    Content="{TemplateBinding Content}"
                                                    Foreground="{x:Null}"
                                                    />

                                    <StackPanel Grid.Row="0"
                                                HorizontalAlignment="Right"
                                                VerticalAlignment="Top"
                                                Orientation="Horizontal"
                                                WindowChrome.IsHitTestVisibleInChrome="True"
                                                >

                                        <ContentControl Content="{TemplateBinding TitlePlaceableContent}" />
                                        <Button Command="{Binding Source={x:Static SystemCommands.MinimizeWindowCommand}}"
                                                Style="{StaticResource Style.Button.Window}"
                                                ToolTip="Minimize"
                                                >
                                            <Button.Content>
                                                <Grid Height="25"
                                                      Width="30"
                                                      RenderTransform="1,0,0,1,0,1"
                                                      >
                                                    <Path Height="7"
                                                          Width="8"
                                                          HorizontalAlignment="Center"
                                                          VerticalAlignment="Center"
                                                          Data="M0,6 L8,6 Z"
                                                          Stroke="{DynamicResource Private.Brush.Foreground.Window}"
                                                          StrokeThickness="2"
                                                          />
                                                </Grid>
                                            </Button.Content>
                                        </Button>
                                        <Grid Margin="1,0,1,0">
                                            <Button x:Name="Restore"
                                                    Command="{Binding Source={x:Static SystemCommands.RestoreWindowCommand}}"
                                                    Style="{StaticResource Style.Button.Window}"
                                                    ToolTip="Restore"
                                                    Visibility="Collapsed"
                                                    >
                                                <Button.Content>
                                                    <Grid Height="25"
                                                          Width="30"
                                                          RenderTransform="1,0,0,1,.5,.5"
                                                          UseLayoutRounding="True"
                                                          >
                                                        <Path Height="8"
                                                              Width="8"
                                                              HorizontalAlignment="Center"
                                                              VerticalAlignment="Center"
                                                              Data="M2,0 L8,0 L8,6 M0,3 L6,3 M0,2 L6,2 L6,8 L0,8 Z"
                                                              Stroke="{DynamicResource Private.Brush.Foreground.Window}"
                                                              StrokeThickness="1"
                                                              />
                                                    </Grid>
                                                </Button.Content>
                                            </Button>
                                            <Button x:Name="Maximize"
                                                    Command="{Binding Source={x:Static SystemCommands.MaximizeWindowCommand}}"
                                                    Style="{StaticResource Style.Button.Window}"
                                                    ToolTip="Maximize"
                                                    >
                                                <Button.Content>
                                                    <Grid Height="25" Width="31">
                                                        <Path Height="8"
                                                              Width="9"
                                                              HorizontalAlignment="Center"
                                                              VerticalAlignment="Center"
                                                              Data="M0,1 L9,1 L9,8 L0,8 Z"
                                                              Stroke="{DynamicResource Private.Brush.Foreground.Window}"
                                                              StrokeThickness="2"
                                                              />
                                                    </Grid>
                                                </Button.Content>
                                            </Button>
                                        </Grid>
                                        <Button Command="{Binding Source={x:Static SystemCommands.CloseWindowCommand}}"
                                                Style="{StaticResource Style.Button.Window}"
                                                ToolTip="Close"
                                                >
                                            <Button.Content>
                                                <Border Height="25"
                                                        Width="30"
                                                        RenderTransform="1,0,0,1,0,1"
                                                        >
                                                    <Path Height="7"
                                                          Width="8"
                                                          HorizontalAlignment="Center"
                                                          VerticalAlignment="Center"
                                                          Data="M0,0 L8,7 M8,0 L0,7 Z"
                                                          Stroke="{DynamicResource Private.Brush.Foreground.Window}"
                                                          StrokeThickness="1.5"
                                                          />
                                                </Border>
                                            </Button.Content>
                                        </Button>
                                    </StackPanel>
                                    <TextBlock x:Name="WindowTitleTextBlock"
                                               Grid.Row="0"
                                               HorizontalAlignment="Left"
                                               VerticalAlignment="Center"
                                               FontSize="16"
                                               FontWeight="Bold"
                                               Foreground="{DynamicResource Private.Brush.Foreground.Window}"
                                               Margin="8,-1,0,0"
                                               Text="{TemplateBinding Title}"
                                               TextTrimming="CharacterEllipsis"
                                               />
                                    <Grid Grid.Row="2"
                                          HorizontalAlignment="Right"
                                          VerticalAlignment="Bottom"
                                          >
                                        <Path x:Name="ResizeGrip"
                                              Height="12"
                                              Width="12"
                                              HorizontalAlignment="Right"
                                              Data="F1 M1,10 L3,10 M5,10 L7,10 M9,10 L11,10 M2,9 L2,11 M6,9 L6,11 M10,9 L10,11 M5,6 L7,6 M9,6 L11,6 M6,5 L6,7 M10,5 L10,7 M9,2 L11,2 M10,1 L10,3"
                                              Margin="1"
                                              Stretch="None"
                                              Stroke="{DynamicResource Private.Brush.Foreground.Window}"
                                              StrokeThickness="1"
                                              Visibility="Collapsed"
                                              />
                                    </Grid>
                                </Grid>
                            </AdornerDecorator>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="Maximize" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Restore" Property="Visibility" Value="Visible" />
                            <Setter Property="WindowChrome.WindowChrome">
                                <Setter.Value>
                                    <WindowChrome ResizeBorderThickness="0" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="WindowState" Value="Normal">
                            <Setter TargetName="Maximize" Property="Visibility" Value="Visible" />
                            <Setter TargetName="Restore" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ResizeMode" Value="CanResizeWithGrip" />
                                <Condition Property="WindowState" Value="Normal" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ResizeGrip" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome ResizeBorderThickness="4" />
            </Setter.Value>
        </Setter>
    </Style>


    <FlowDocumentScrollViewer x:Key="FlowDocument.Licence"
                              Style="{DynamicResource Style.FlowDocumentScrollViewer}"
                              VerticalScrollBarVisibility="Auto"
                              Zoom="80"
                              >
        <FlowDocument>
            <Paragraph>
                Apache License
                Version 2.0, January 2004
            </Paragraph>
            <Paragraph>
                Copyright (c) 2015 SuperSocket
            </Paragraph>
            <Paragraph>
                TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
                1. Definitions.
                &quot;License&quot; shall mean the terms and conditions for use, reproduction,
                and distribution as defined by Sections 1 through 9 of this document.
                &quot;Licensor&quot; shall mean the copyright owner or entity authorized by
                the copyright owner that is granting the License.
                &quot;Legal Entity&quot; shall mean the union of the acting entity and all
                other entities that control, are controlled by, or are under common
                control with that entity. For the purposes of this definition,
                &quot;control&quot; means (i) the power, direct or indirect, to cause the
                direction or management of such entity, whether by contract or
                otherwise, or (ii) ownership of fifty percent (50%) or more of the
                outstanding shares, or (iii) beneficial ownership of such entity.
                &quot;You&quot; (or &quot;Your&quot;) shall mean an individual or Legal Entity
                exercising permissions granted by this License.
                &quot;Source&quot; form shall mean the preferred form for making modifications,
                including but not limited to software source code, documentation
                source, and configuration files.
                &quot;Object&quot; form shall mean any form resulting from mechanical
                transformation or translation of a Source form, including but
                not limited to compiled object code, generated documentation,
                and conversions to other media types.
                &quot;Work&quot; shall mean the work of authorship, whether in Source or
                Object form, made available under the License, as indicated by a
                copyright notice that is included in or attached to the work
                (an example is provided in the Appendix below).
                &quot;Derivative Works&quot; shall mean any work, whether in Source or Object
                form, that is based on (or derived from) the Work and for which the
                editorial revisions, annotations, elaborations, or other modifications
                represent, as a whole, an original work of authorship. For the purposes
                of this License, Derivative Works shall not include works that remain
                separable from, or merely link (or bind by name) to the interfaces of,
                the Work and Derivative Works thereof.
                &quot;Contribution&quot; shall mean any work of authorship, including
                the original version of the Work and any modifications or additions
                to that Work or Derivative Works thereof, that is intentionally
                submitted to Licensor for inclusion in the Work by the copyright owner
                or by an individual or Legal Entity authorized to submit on behalf of
                the copyright owner. For the purposes of this definition, &quot;submitted&quot;
                means any form of electronic, verbal, or written communication sent
                to the Licensor or its representatives, including but not limited to
                communication on electronic mailing lists, source code control systems,
                and issue tracking systems that are managed by, or on behalf of, the
                Licensor for the purpose of discussing and improving the Work, but
                excluding communication that is conspicuously marked or otherwise
                designated in writing by the copyright owner as &quot;Not a Contribution.&quot;
                &quot;Contributor&quot; shall mean Licensor and any individual or Legal Entity
                on behalf of whom a Contribution has been received by Licensor and
                subsequently incorporated within the Work.
                2. Grant of Copyright License. Subject to the terms and conditions of
                this License, each Contributor hereby grants to You a perpetual,
                worldwide, non-exclusive, no-charge, royalty-free, irrevocable
                copyright license to reproduce, prepare Derivative Works of,
                publicly display, publicly perform, sublicense, and distribute the
                Work and such Derivative Works in Source or Object form.
                3. Grant of Patent License. Subject to the terms and conditions of
                this License, each Contributor hereby grants to You a perpetual,
                worldwide, non-exclusive, no-charge, royalty-free, irrevocable
                (except as stated in this section) patent license to make, have made,
                use, offer to sell, sell, import, and otherwise transfer the Work,
                where such license applies only to those patent claims licensable
                by such Contributor that are necessarily infringed by their
                Contribution(s) alone or by combination of their Contribution(s)
                with the Work to which such Contribution(s) was submitted. If You
                institute patent litigation against any entity (including a
                cross-claim or counterclaim in a lawsuit) alleging that the Work
                or a Contribution incorporated within the Work constitutes direct
                or contributory patent infringement, then any patent licenses
                granted to You under this License for that Work shall terminate
                as of the date such litigation is filed.
                4. Redistribution. You may reproduce and distribute copies of the
                Work or Derivative Works thereof in any medium, with or without
                modifications, and in Source or Object form, provided that You
                meet the following conditions:
                (a) You must give any other recipients of the Work or
                Derivative Works a copy of this License; and
                (b) You must cause any modified files to carry prominent notices
                stating that You changed the files; and
                (c) You must retain, in the Source form of any Derivative Works
                that You distribute, all copyright, patent, trademark, and
                attribution notices from the Source form of the Work,
                excluding those notices that do not pertain to any part of
                the Derivative Works; and
                (d) If the Work includes a &quot;NOTICE&quot; text file as part of its
                distribution, then any Derivative Works that You distribute must
                include a readable copy of the attribution notices contained
                within such NOTICE file, excluding those notices that do not
                pertain to any part of the Derivative Works, in at least one
                of the following places: within a NOTICE text file distributed
                as part of the Derivative Works; within the Source form or
                documentation, if provided along with the Derivative Works; or,
                within a display generated by the Derivative Works, if and
                wherever such third-party notices normally appear. The contents
                of the NOTICE file are for informational purposes only and
                do not modify the License. You may add Your own attribution
                notices within Derivative Works that You distribute, alongside
                or as an addendum to the NOTICE text from the Work, provided
                that such additional attribution notices cannot be construed
                as modifying the License.
                You may add Your own copyright statement to Your modifications and
                may provide additional or different license terms and conditions
                for use, reproduction, or distribution of Your modifications, or
                for any such Derivative Works as a whole, provided Your use,
                reproduction, and distribution of the Work otherwise complies with
                the conditions stated in this License.
                5. Submission of Contributions. Unless You explicitly state otherwise,
                any Contribution intentionally submitted for inclusion in the Work
                by You to the Licensor shall be under the terms and conditions of
                this License, without any additional terms or conditions.
                Notwithstanding the above, nothing herein shall supersede or modify
                the terms of any separate license agreement you may have executed
                with Licensor regarding such Contributions.
                6. Trademarks. This License does not grant permission to use the trade
                names, trademarks, service marks, or product names of the Licensor,
                except as required for reasonable and customary use in describing the
                origin of the Work and reproducing the content of the NOTICE file.
                7. Disclaimer of Warranty. Unless required by applicable law or
                agreed to in writing, Licensor provides the Work (and each
                Contributor provides its Contributions) on an &quot;AS IS&quot; BASIS,
                WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
                implied, including, without limitation, any warranties or conditions
                of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
                PARTICULAR PURPOSE. You are solely responsible for determining the
                appropriateness of using or redistributing the Work and assume any
                risks associated with Your exercise of permissions under this License.
                8. Limitation of Liability. In no event and under no legal theory,
                whether in tort (including negligence), contract, or otherwise,
                unless required by applicable law (such as deliberate and grossly
                negligent acts) or agreed to in writing, shall any Contributor be
                liable to You for damages, including any direct, indirect, special,
                incidental, or consequential damages of any character arising as a
                result of this License or out of the use or inability to use the
                Work (including but not limited to damages for loss of goodwill,
                work stoppage, computer failure or malfunction, or any and all
                other commercial damages or losses), even if such Contributor
                has been advised of the possibility of such damages.
                9. Accepting Warranty or Additional Liability. While redistributing
                the Work or Derivative Works thereof, You may choose to offer,
                and charge a fee for, acceptance of support, warranty, indemnity,
                or other liability obligations and/or rights consistent with this
                License. However, in accepting such obligations, You may act only
                on Your own behalf and on Your sole responsibility, not on behalf
                of any other Contributor, and only if You agree to indemnify,
                defend, and hold each Contributor harmless for any liability
                incurred by, or claims asserted against, such Contributor by reason
                of your accepting any such warranty or additional liability.
                END OF TERMS AND CONDITIONS
                APPENDIX: How to apply the Apache License to your work.
                To apply the Apache License to your work, attach the following
                boilerplate notice, with the fields enclosed by brackets &quot;{}&quot;
                replaced with your own identifying information. (Don't include
                the brackets!)  The text should be enclosed in the appropriate
                comment syntax for the file format. We also recommend that a
                file or class name and description of purpose be included on the
                same &quot;printed page&quot; as the copyright notice for easier
                identification within third-party archives.
                Copyright {yyyy} {name of copyright owner}
                Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
                you may not use this file except in compliance with the License.
                You may obtain a copy of the License at
                http://www.apache.org/licenses/LICENSE-2.0
                Unless required by applicable law or agreed to in writing, software
                distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
                WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                See the License for the specific language governing permissions and
                limitations under the License.
            </Paragraph>
            <Paragraph>
                The MIT License (MIT)
            </Paragraph>
            <Paragraph>
                Copyright (c) 2010 Andreas Håkansson, Steven Robbins and contributors
            </Paragraph>
            <Paragraph>
                Permission is hereby granted, free of charge, to any person obtaining a copy
                of this software and associated documentation files (the &quot;Software&quot;), to deal
                in the Software without restriction, including without limitation the rights
                to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                copies of the Software, and to permit persons to whom the Software is
                furnished to do so, subject to the following conditions:
            </Paragraph>
            <Paragraph>
                The above copyright notice and this permission notice shall be included in all
                copies or substantial portions of the Software.
            </Paragraph>
            <Paragraph>
                THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                SOFTWARE.
            </Paragraph>
            <Paragraph>
                The MIT License (MIT)
            </Paragraph>
            <Paragraph>
                Copyright (c) 2014 Autofac Project
            </Paragraph>
            <Paragraph>
                Permission is hereby granted, free of charge, to any person obtaining a copy
                of this software and associated documentation files (the &quot;Software&quot;), to deal
                in the Software without restriction, including without limitation the rights
                to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                copies of the Software, and to permit persons to whom the Software is
                furnished to do so, subject to the following conditions:
            </Paragraph>
            <Paragraph>
                The above copyright notice and this permission notice shall be included in all
                copies or substantial portions of the Software.
            </Paragraph>
            <Paragraph>
                THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                SOFTWARE.
            </Paragraph>
            <Paragraph>
                The MIT License (MIT)
            </Paragraph>
            <Paragraph>
                Copyright (c) 2015 Soltys.ChangeCase
            </Paragraph>
            <Paragraph>
                Permission is hereby granted, free of charge, to any person obtaining a copy
                of this software and associated documentation files (the &quot;Software&quot;), to deal
                in the Software without restriction, including without limitation the rights
                to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                copies of the Software, and to permit persons to whom the Software is
                furnished to do so, subject to the following conditions:
            </Paragraph>
            <Paragraph>
                The above copyright notice and this permission notice shall be included in all
                copies or substantial portions of the Software.
            </Paragraph>
            <Paragraph>
                THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                SOFTWARE.
            </Paragraph>
        </FlowDocument>
    </FlowDocumentScrollViewer>

    <Style x:Key="Style.ContentControl.MinimizeToTray" TargetType="{x:Type ContentControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Grid Height="15" Width="15">
                        <Ellipse Height="3"
                                 Width="3"
                                 HorizontalAlignment="Right"
                                 VerticalAlignment="Bottom"
                                 Fill="White"
                                 Margin="3"
                                 />
                    </Grid>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>