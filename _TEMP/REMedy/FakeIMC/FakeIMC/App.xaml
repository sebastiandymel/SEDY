<Application
    x:Class="FakeIMC.UI.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:commonUi="clr-namespace:Remedy.CommonUI;assembly=Remedy.CommonUI"
    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:materialDesignColors="clr-namespace:MaterialDesignColors;assembly=MaterialDesignColors"
    xmlns:system="clr-namespace:System;assembly=mscorlib"
    xmlns:ui="clr-namespace:FakeIMC.UI">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.DeepPurple.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Accent/MaterialDesignColor.Lime.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Flipper.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Popupbox.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <Style
                x:Key="Style.TextBox.FreqItem"
                BasedOn="{StaticResource MaterialDesignFloatingHintTextBox}"
                TargetType="{x:Type TextBox}">
                <Setter Property="Width" Value="30" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />
            </Style>

            <commonUi:FrequencyConverter x:Key="Converter.Frequency" />

            <Style x:Key="HoverBorder" TargetType="{x:Type Border}">
                <Setter Property="BorderBrush" Value="Red" />
                <Setter Property="BorderThickness" Value="0,0,0,2" />
                <Setter Property="Opacity" Value="0" />
                <Setter Property="VerticalAlignment" Value="Bottom" />
                <Setter Property="RenderTransformOrigin" Value="0.5, 0.5" />
                <Setter Property="Effect">
                    <Setter.Value>
                        <DropShadowEffect
                            BlurRadius="3"
                            Opacity="0.7"
                            ShadowDepth="1" />
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="SelectionBorder" TargetType="{x:Type Border}">
                <Setter Property="Background" Value="#A0ff1c7a" />
                <Setter Property="Opacity" Value="0" />
                <Setter Property="CornerRadius" Value="2" />
                <Setter Property="RenderTransformOrigin" Value="0.5, 0.5" />
                <Setter Property="Effect">
                    <Setter.Value>
                        <DropShadowEffect
                            BlurRadius="0"
                            Opacity="0.7"
                            ShadowDepth="2" />
                    </Setter.Value>
                </Setter>
            </Style>

            <Storyboard x:Key="HoverEffect" x:Shared="False">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="hoverBorder" Storyboard.TargetProperty="Opacity">
                    <EasingDoubleKeyFrame KeyTime="00:00:0.3" Value="1" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>

            <Storyboard x:Key="SelectionEffect" x:Shared="False">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="selectionBorder" Storyboard.TargetProperty="Opacity">
                    <EasingDoubleKeyFrame KeyTime="00:00:0.3" Value="1" />
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Rotate" Storyboard.TargetProperty="Angle">
                    <EasingDoubleKeyFrame KeyTime="00:00:0.1" Value="10">
                        <EasingDoubleKeyFrame.EasingFunction>
                            <BackEase Amplitude="0.8" />
                        </EasingDoubleKeyFrame.EasingFunction>
                    </EasingDoubleKeyFrame>
                    <EasingDoubleKeyFrame KeyTime="00:00:0.2" Value="0" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>


            <DataTemplate x:Key="Private.DataTemplate.Cell" DataType="{x:Type ui:FreqValCell}">
                <Grid
                    Width="30"
                    Height="30"
                    Margin="4,0,4,0">
                    <i:Interaction.Behaviors>
                        <ui:MouseSelectBehavior />
                    </i:Interaction.Behaviors>
                    <Border Name="hoverBorder" Style="{StaticResource HoverBorder}">
                        <Border.RenderTransform>
                            <ScaleTransform x:Name="scale" />
                        </Border.RenderTransform>
                    </Border>
                    <Border
                        Name="selectionBorder"
                        Grid.Row="1"
                        Style="{StaticResource SelectionBorder}">
                        <i:Interaction.Behaviors>
                            <ui:MouseSelectBehavior />
                        </i:Interaction.Behaviors>
                        <Border.RenderTransform>
                            <RotateTransform x:Name="Rotate" />
                        </Border.RenderTransform>
                    </Border>

                    <!--  READ ONLY MODE  -->
                    <TextBlock
                        Name="ValueBox"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Text="{Binding Value}" />
                    <!--  EDIT MODE  -->
                    <TextBox
                        Name="EditBox"
                        Margin="0,-12,0,0"
                        Style="{StaticResource Style.TextBox.FreqItem}"
                        Text="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                        Visibility="Collapsed">
                        <i:Interaction.Behaviors>
                            <commonUi:SelectAllTextOnFocusBehavior SelectAllWhenMadeVisible="true" />
                            <ui:MouseSelectBehavior />
                        </i:Interaction.Behaviors>
                    </TextBox>
                </Grid>
                <DataTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Trigger.EnterActions>
                            <BeginStoryboard Name="h" Storyboard="{StaticResource HoverEffect}" />
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <RemoveStoryboard BeginStoryboardName="h" />
                        </Trigger.ExitActions>
                    </Trigger>
                    <DataTrigger Binding="{Binding IsEditMode}" Value="True">
                        <Setter TargetName="ValueBox" Property="Visibility" Value="Collapsed" />
                        <Setter TargetName="EditBox" Property="Visibility" Value="Visible" />
                        <Setter TargetName="selectionBorder" Property="Visibility" Value="Hidden" />
                    </DataTrigger>
                    <Trigger Property="ui:CellExtensions.IsHovered" Value="True">
                        <Trigger.EnterActions>
                            <BeginStoryboard Name="h1" Storyboard="{StaticResource HoverEffect}" />
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <RemoveStoryboard BeginStoryboardName="h1" />
                        </Trigger.ExitActions>
                    </Trigger>
                    <DataTrigger Binding="{Binding Path=(ui:CellExtensions.IsHovered), RelativeSource={RelativeSource AncestorType=ContentPresenter}}" Value="True">
                        <DataTrigger.EnterActions>
                            <BeginStoryboard Name="hoverAnimation" Storyboard="{StaticResource HoverEffect}" />
                        </DataTrigger.EnterActions>
                        <DataTrigger.ExitActions>
                            <RemoveStoryboard BeginStoryboardName="hoverAnimation" />
                        </DataTrigger.ExitActions>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding IsSelected}" Value="True">
                        <DataTrigger.EnterActions>
                            <BeginStoryboard Name="selectionAnimation" Storyboard="{StaticResource SelectionEffect}" />
                        </DataTrigger.EnterActions>
                        <DataTrigger.ExitActions>
                            <RemoveStoryboard BeginStoryboardName="selectionAnimation" />
                        </DataTrigger.ExitActions>
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <DataTemplate x:Key="Private.DataTemplate.CellWithHeader" DataType="{x:Type ui:FreqValCell}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" SharedSizeGroup="FreqColumn" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <TextBlock
                        Margin="0,0,0,4"
                        HorizontalAlignment="Center"
                        FontWeight="DemiBold"
                        Foreground="{DynamicResource Brush.TextBlock.Header}"
                        Style="{DynamicResource MaterialDesignBody2TextBlock}"
                        Text="{Binding Frequency, Converter={StaticResource Converter.Frequency}}" />

                    <ContentControl
                        Grid.Row="1"
                        ui:CellExtensions.IsHovered="{Binding Path=(ui:CellExtensions.IsHovered), RelativeSource={RelativeSource AncestorType=ContentPresenter}}"
                        Content="{Binding}"
                        ContentTemplate="{StaticResource Private.DataTemplate.Cell}" />
                </Grid>

            </DataTemplate>

            <Style x:Key="Style.HeaderedItemsControl.FrequencyValueEditor.ColumnHeader" TargetType="{x:Type HeaderedItemsControl}">
                <Setter Property="Margin" Value="0,2,0,2" />
                <Setter Property="ItemTemplate" Value="{DynamicResource Private.DataTemplate.CellWithHeader}" />
                <Setter Property="HeaderTemplate">
                    <Setter.Value>
                        <DataTemplate DataType="{x:Type system:String}">
                            <TextBlock Style="{DynamicResource MaterialDesignBody2TextBlock}" Text="{Binding}" />
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type HeaderedItemsControl}">
                            <Grid VerticalAlignment="Top">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" SharedSizeGroup="LabelGroup" />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>
                                <ContentControl
                                    VerticalAlignment="Bottom"
                                    Content="{TemplateBinding Header}"
                                    ContentTemplate="{TemplateBinding HeaderTemplate}">
                                    <i:Interaction.Behaviors>
                                        <ui:CellBehavior ParentContainer="{Binding RelativeSource={RelativeSource AncestorType=materialDesign:Card}}" Target="{Binding RelativeSource={RelativeSource TemplatedParent}}" />
                                    </i:Interaction.Behaviors>
                                </ContentControl>
                                <ItemsPresenter
                                    Name="itemsPresenter"
                                    Grid.Column="1"
                                    Margin="16,0,0,0" />
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <StackPanel Orientation="Horizontal" />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style
                x:Key="Style.HeaderedItemsControl.FrequencyValueEditor"
                BasedOn="{StaticResource Style.HeaderedItemsControl.FrequencyValueEditor.ColumnHeader}"
                TargetType="{x:Type HeaderedItemsControl}">
                <Setter Property="ItemTemplate" Value="{StaticResource Private.DataTemplate.Cell}" />
            </Style>

            <Style
                x:Key="Style.PalleteButton"
                BasedOn="{StaticResource MaterialDesignFlatButton}"
                TargetType="Button">
                <Setter Property="Margin" Value="0" />
                <Setter Property="CommandParameter" Value="{Binding}" />
                <Setter Property="VerticalAlignment" Value="Stretch" />
                <Setter Property="HorizontalAlignment" Value="Stretch" />
                <Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{Binding ExemplarHue.Foreground, Mode=OneTime}" />
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="PalettePath" TargetType="Path">
                <Setter Property="Data" Value="M17.5,12A1.5,1.5 0 0,1 16,10.5A1.5,1.5 0 0,1 17.5,9A1.5,1.5 0 0,1 19,10.5A1.5,1.5 0 0,1 17.5,12M14.5,8A1.5,1.5 0 0,1 13,6.5A1.5,1.5 0 0,1 14.5,5A1.5,1.5 0 0,1 16,6.5A1.5,1.5 0 0,1 14.5,8M9.5,8A1.5,1.5 0 0,1 8,6.5A1.5,1.5 0 0,1 9.5,5A1.5,1.5 0 0,1 11,6.5A1.5,1.5 0 0,1 9.5,8M6.5,12A1.5,1.5 0 0,1 5,10.5A1.5,1.5 0 0,1 6.5,9A1.5,1.5 0 0,1 8,10.5A1.5,1.5 0 0,1 6.5,12M12,3A9,9 0 0,0 3,12A9,9 0 0,0 12,21A1.5,1.5 0 0,0 13.5,19.5C13.5,19.11 13.35,18.76 13.11,18.5C12.88,18.23 12.73,17.88 12.73,17.5A1.5,1.5 0 0,1 14.23,16H16A5,5 0 0,0 21,11C21,6.58 16.97,3 12,3Z" />
                <Setter Property="Fill">
                    <Setter.Value>
                        <SolidColorBrush Color="{Binding ExemplarHue.Foreground, Mode=OneTime}" />
                    </Setter.Value>
                </Setter>
            </Style>

            <DataTemplate x:Key="DataTemplate.Swatch" DataType="{x:Type materialDesignColors:Swatch}">

                <materialDesign:Card Width="120" Margin="2,2,6,6">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <TextBlock
                            Grid.ColumnSpan="2"
                            Margin="8"
                            Text="{Binding Name}" />
                        <Border
                            Grid.Row="1"
                            Grid.Column="0"
                            MinWidth="80">

                            <Border.Background>
                                <SolidColorBrush Color="{Binding ExemplarHue.Color, Mode=OneTime}" />
                            </Border.Background>
                            <Button Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Path=DataContext.Skin.ApplyPrimaryCommand, Mode=OneTime}" Style="{DynamicResource Style.PalleteButton}">
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="Primary" />
                                    <Viewbox Width="16" Height="16">
                                        <Canvas Width="24" Height="24">
                                            <Path Style="{StaticResource PalettePath}" />
                                        </Canvas>
                                    </Viewbox>
                                </StackPanel>
                            </Button>
                        </Border>
                    </Grid>
                </materialDesign:Card>

            </DataTemplate>


            <Style x:Key="Style.Root" TargetType="{x:Type ContentControl}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ContentControl}">
                            <Grid>
                                <ContentPresenter Name="Presenter">
                                    <ContentPresenter.RenderTransform>
                                        <TranslateTransform x:Name="ContentTranslate" />
                                    </ContentPresenter.RenderTransform>
                                </ContentPresenter>
                                <Grid
                                    Name="Root"
                                    Background="Gray"
                                    Visibility="Collapsed">
                                    <Grid.RenderTransform>
                                        <TranslateTransform x:Name="RootTranslate" />
                                    </Grid.RenderTransform>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="3*" />
                                    </Grid.ColumnDefinitions>
                                    <TextBlock
                                        Grid.Column="1"
                                        Margin="30,0,0,0"
                                        VerticalAlignment="Center"
                                        FontFamily="Andy"
                                        FontSize="90">
                                        Fake IMC
                                    </TextBlock>
                                </Grid>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <EventTrigger RoutedEvent="Loaded">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation
                                                Storyboard.TargetName="Root"
                                                Storyboard.TargetProperty="Opacity"
                                                From="1"
                                                To="0.5"
                                                Duration="0:0:6">
                                                <DoubleAnimation.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseIn" />
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                            <DoubleAnimation
                                                Storyboard.TargetName="Presenter"
                                                Storyboard.TargetProperty="Opacity"
                                                From="0.1"
                                                To="1"
                                                Duration="0:0:4">
                                                <DoubleAnimation.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseIn" />
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="RootTranslate" Storyboard.TargetProperty="X">
                                                <EasingDoubleKeyFrame KeyTime="00:00:2.3" Value="0" />
                                                <EasingDoubleKeyFrame KeyTime="00:00:6" Value="2000">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseOut" />
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ContentTranslate" Storyboard.TargetProperty="X">
                                                <EasingDoubleKeyFrame KeyTime="00:00:2" Value="-1900" />
                                                <EasingDoubleKeyFrame KeyTime="00:00:3.4" Value="0">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <ExponentialEase EasingMode="EaseOut" />
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Root" Storyboard.TargetProperty="(UIElement.Visibility)">

                                                <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{x:Static Visibility.Visible}" />
                                                <DiscreteObjectKeyFrame KeyTime="00:00:6" Value="{x:Static Visibility.Collapsed}" />
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>
    </Application.Resources>
</Application>
